package negocio.empleado;

import java.util.LinkedList;
import java.util.List;

import integracion.empleado.DAOEmpleado;
import integracion.factoria_dao.DAOFactoria;
import integracion.transactions.Transaction;
import integracion.transactions.TransactionManager;

public class SAEmpleadoImpl implements SAEmpleado {

	public int registrarEmpleado(TEmpleado empleado) {

		int id = 0;
		Transaction transaction = TransactionManager.getInstance().newTransaction();
		
		DAOEmpleado daoEmpleado = DAOFactoria.getInstancia().generarDAOEmpleado();
		TEmpleado empleadoLeido = daoEmpleado.buscarEmpleadoPorDNI(empleado.getDNI());
		
		if (empleadoLeido == null || !empleadoLeido.isActivo()){
			id = daoEmpleado.registrarEmpleado(empleado);
			transaction.commit();
		}
		else{
			transaction.rollback();
		}
		
		TransactionManager.getInstance().removeTransaction();
		return id;
	}

	public int borrarEmpleado(int id) {
		int resp = 0;
		
		if (id < 1)
			throw new IllegalArgumentException("ID incorrecto.");
		
		Transaction transaction = TransactionManager.getInstance().newTransaction();

		DAOEmpleado daoEmpleado = DAOFactoria.getInstancia().generarDAOEmpleado();
		TEmpleado empleadoLeido = daoEmpleado.buscarEmpleadoPorID(id);

		if (empleadoLeido != null && empleadoLeido.isActivo()) {
			resp = daoEmpleado.borrarEmpleado(id);
			transaction.commit();
		} else {
			transaction.rollback();
		}
		
		TransactionManager.getInstance().removeTransaction();
		return resp;
	}

	public int modificarEmpleado(TEmpleado empleado) {

		int id = 0;
		
		Transaction transaction = TransactionManager.getInstance().newTransaction();
		
		DAOEmpleado daoEmpleado = DAOFactoria.getInstancia().generarDAOEmpleado();
		TEmpleado empleadoLeido = daoEmpleado.buscarEmpleadoPorDNI(empleado.getDNI());
		
		if (empleadoLeido != null && empleadoLeido.isActivo()) {
			daoEmpleado.modificarEmpleado(empleado);
			transaction.commit();
			id = 1;
		} else {
			transaction.rollback();
		}
		TransactionManager.getInstance().removeTransaction();
		return id;
	}

	public TEmpleado buscarEmpleadoPorID(int id) {
		if (id < 1)
			throw new IllegalArgumentException("ID incorrecto.");

		Transaction transaction = TransactionManager.getInstance().newTransaction();
		
		DAOEmpleado daoEmpleado = DAOFactoria.getInstancia().generarDAOEmpleado();
		TEmpleado respuesta = daoEmpleado.buscarEmpleadoPorID(id);

		if (respuesta != null && respuesta.isActivo()) {
			transaction.commit();
		} else {
			respuesta = null;
			transaction.rollback();
		}
		TransactionManager.getInstance().removeTransaction();
		return respuesta;
	}

	public LinkedList<TEmpleado> mostrarListaEmpleados() {
		
		LinkedList<TEmpleado> lista = null;
		
		Transaction transaction = TransactionManager.getInstance().newTransaction();
		
		DAOEmpleado daoEmpleado = DAOFactoria.getInstancia().generarDAOEmpleado();
		lista = daoEmpleado.mostrarListaEmpleados();
		 
		 if(lista != null){
			transaction.commit();
		}
		 else{
			transaction.rollback();
		}
		TransactionManager.getInstance().removeTransaction();
		return lista;
	}

	public List<TEmpleado> mostrarEmpleadosPorJornada(boolean esCompleta) {
		
		List<TEmpleado> lista = null;
		
		Transaction transaction = TransactionManager.getInstance().newTransaction();
		
		DAOEmpleado daoEmpleado = DAOFactoria.getInstancia().generarDAOEmpleado();
		
		lista=daoEmpleado.mostrarEmpleadosPorJornada(esCompleta);
		
		if(lista != null){
			transaction.commit();
		}
		 else{
			transaction.rollback();
		}
		
		TransactionManager.getInstance().removeTransaction();
		return lista;
		
	}
}