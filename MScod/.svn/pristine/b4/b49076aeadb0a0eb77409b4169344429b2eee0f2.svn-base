package integracion.pelicula;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;

import integracion.transactions.TransactionManager;
import negocio.factura.Pair;
import negocio.pelicula.TPelicula;

public class DAOPeliculaImpl implements DAOPelicula{
	
	Connection conexion;
	PreparedStatement pStatement;
	ResultSet rs;

	public DAOPeliculaImpl(){
		conexion = TransactionManager.getInstance().getTransaction().getConnection();
	}
	
	public int registrarPelicula(TPelicula tPelicula) {
		Integer idPeli = 0;
		
		try {
			pStatement = conexion.prepareStatement("SELECT * FROM peliculas WHERE nombre = ? AND activo = 'false'");
			pStatement.setString(1, tPelicula.getNombre());
			rs = pStatement.executeQuery();
			if (rs.next()){
				pStatement = conexion.prepareStatement("UPDATE peliculas SET activo = 'true', duracion = ? WHERE nombre = ?");
				pStatement.setString(2, tPelicula.getNombre());
				pStatement.setInt(1, tPelicula.getDuracion());
				pStatement.executeUpdate();
				idPeli = rs.getInt(1);
			}
			else{
				pStatement = conexion.prepareStatement("INSERT INTO peliculas (id_peliculas, nombre, duracion) VALUES (null,?,?)", PreparedStatement.RETURN_GENERATED_KEYS);
				pStatement.setString(1, tPelicula.getNombre());
				pStatement.setInt(2, tPelicula.getDuracion());
				pStatement.executeUpdate();
				rs = pStatement.getGeneratedKeys();
				if (rs.next()){
					idPeli = rs.getInt(1);
				}
			}
			closeStatement();
			closeResultSet();			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return idPeli;
	}

	public int modificarPelicula(TPelicula tPelicula) {
		Integer peli = 0;
		try {
			pStatement = conexion.prepareStatement("UPDATE peliculas SET nombre = ?, duracion = ?  WHERE id_peliculas = " + tPelicula.getID());
			pStatement.setString(1, tPelicula.getNombre());
			pStatement.setInt(2, tPelicula.getDuracion());
			pStatement.executeUpdate();
			peli = tPelicula.getID();
			closeStatement();
			closeResultSet();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return peli;
	}

	public int borrarPelicula(int id) {
		try {
			pStatement = conexion.prepareStatement("UPDATE peliculas SET activo = 'false' WHERE id_peliculas = " + id);
			pStatement.executeUpdate();
			closeStatement();
			closeResultSet();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return id;
	}

	public TPelicula buscarPeliculaPorID(int id) {
		TPelicula peli = null;
		
		try {
			pStatement = conexion.prepareStatement("SELECT * FROM peliculas WHERE id_peliculas = " + id);
			rs = pStatement.executeQuery();
			if (rs.next()){
				peli = new TPelicula(rs.getInt(1), rs.getInt(3), rs.getString(2), rs.getBoolean(4));
			}
			closeStatement();
			closeResultSet();			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return peli;
	}
	
	public TPelicula buscarPeliculaPorNombre(String nombre) {
		TPelicula peli = null;
		
		try {
			pStatement = conexion.prepareStatement("SELECT * FROM peliculas WHERE nombre = ?");
			pStatement.setString(1, nombre);
			rs = pStatement.executeQuery();
			if (rs.next()){
				peli = new TPelicula(rs.getInt(1), rs.getInt(3), rs.getString(2), rs.getBoolean(4));
			}
			closeStatement();
			closeResultSet();			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return peli;
	}

	public LinkedList<TPelicula> mostrarListaPeliculas() {
		LinkedList<TPelicula> lista = new LinkedList<TPelicula>();
		try {
			pStatement = conexion.prepareStatement("SELECT * FROM peliculas WHERE activo = 'true'");
			rs = pStatement.executeQuery();
			while (rs.next()){
				lista.add(new TPelicula(rs.getInt(1), rs.getInt(3), rs.getString(2)));
			}
			closeStatement();
			closeResultSet();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return lista;
	}
	
	public LinkedList<Pair<String, Integer>> mostrarTopPeliculasVendidas() {
		LinkedList<Pair<String, Integer>> lista = new LinkedList<Pair<String, Integer>>();
		try {
			pStatement = conexion.prepareStatement("SELECT peliculas.nombre, SUM(cantidad) AS ventas_totales FROM pase JOIN peliculas USING (id_peliculas) JOIN factura USING (id_pase) WHERE peliculas.activo = 'true' AND pase.activo = 'true' GROUP BY id_peliculas ORDER BY ventas_totales DESC;");
			rs = pStatement.executeQuery();
			while (rs.next()){
				lista.add(new Pair<String, Integer>(rs.getString(1), rs.getInt(2)));
			}
			closeStatement();
			closeResultSet();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return lista;
	}

	public LinkedList<TPelicula> mostrarPeliculasPorFecha(String fecha) {
		LinkedList<TPelicula> lista = new LinkedList<TPelicula>();
		try {
			pStatement = conexion.prepareStatement("SELECT DISTINCT PE.id_peliculas, PE.nombre, PE.duracion FROM peliculas PE JOIN pase PA USING (id_peliculas) WHERE PE.activo = 'true' AND PA.fecha = ?");
			pStatement.setString(1, fecha);
			rs = pStatement.executeQuery();
			while (rs.next()){
				lista.add(new TPelicula(rs.getInt(1), rs.getInt(3), rs.getString(2)));
			}
			closeStatement();
			closeResultSet();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return lista;
	}
	
	private void closeResultSet() throws SQLException {
		rs.close();
	}
	
	private void closeStatement() throws SQLException {
		pStatement.close();
	}

}
